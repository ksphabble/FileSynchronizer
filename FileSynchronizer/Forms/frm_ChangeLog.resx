<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>By Habble, 此工具是我从2022年开始利用业余时间写出来的，主要是因为其他第三方同步工具都需要付费，而我自己刚好有同步需求，所以有了这个工具，图个方便，非盈利性质，如果想要实际支持一下，可以联系我的微信号：ksphabble
如果使用过程中出现BUG或者有好的建议，请在GITHUB上反馈或者联系邮箱：ksphabble@hotmail.com
------------------- （以下是更新日志，我就直接把从2022年开始所有的都贴上来吧） -------------------
版本：2.2.0.1
日期：2025-4-7
改动：
1.	用户体验优化与问题修复
2.	从这个版本开始程序将正式引入自动更新功能！之后的新版本只要有对应的发布包发布到Github上，程序就能自动检测到并给出提示，在程序菜单的帮助-检查更新功能可以点击更新按钮，程序就会自动更新至新版本！在全局设置中可以设置自动查找程序更新的频率（单位为天数），通用程序升级工具将会以通用组件的方式添加至Common.Components.dll中以供其他程序使用

版本：2.1.0.4
日期：2025-4-5
改动：
1.	一些逻辑优化

版本：2.1.0.3
日期：2025-3-30
改动：
1.	一些逻辑优化

版本：2.1.0.2
日期：2025-3-29
改动：
1.	一些逻辑优化

版本：2.1.0.1
日期：2025-3-28
改动：
1.	解决了同步过程中如果远程目录断开连接会导致程序崩溃或者数据库中相关项目丢失的问题
2.	问题修复
3.	更新了所需的组件版本
4.	优化同步过程，引入新机制防止同步过程中因为外部原因导致的文件问题

版本：2.0.3.4
日期：2024-3-22
改动：
1.	优化了大量底层代码，特别是把跟配对操作相关的代码从主界面代码中独立出来
2.	提升了整体效率，现在分析进程速度相比以前的版本有所提高，视机器性能而定

版本：2.0.3.3
日期：2024-3-20
改动：
1.	项目正式上线GITHUB了！现在可以从项目GITHUB主页找到源码和发布包

版本：2.0.3.2
日期：2024-3-17
改动：
1.	引入一个通用组件Common.Components.dll并从底层优化全局设置代码和文件/目录处理代码
2.	解决几个BUG，例如暂停/恢复自动同步动作无法使界面刷新的问题
3.	新增功能：最大保留备份数量，可以有效降低长时间使用本工具后的备份空间过大的问题，在全局设置中设置

版本：2.0.3.1
日期：2023-12-20
改动：
1.	完善同步逻辑，现在同步被修改过的文件的时候也会备份，受全局设置中的“删除文件到"_FSBackup"目录 (隐藏目录)”选项控制
2.	解决了同步过程中如果远程目录断开连接会导致程序崩溃或者数据库中相关项目丢失的问题
3.	新增功能：在主界面的配对总览中双击配对的目录名称打开资源管理器

版本：2.0.2.1
日期：2023-6-29
改动：
1.	修复一个界面显示错误的问题
2.	修复程序窗口从最小化恢复之后被选中配对错误的问题
3.	修复程序界面最小化时依然能在ALT+TAB列表中看到的问题
4.	修复一个网络路径导致获取MD5失败而无法写入数据库的问题
5.	提示“配对相关的目录和文件数量较多，分析差异需时较长，请耐心等待”的阈值调整至SQLITE是100000，ACCESS是40000
6.	新增功能：每日自动清除界面日志，开启后在每日第一次刷新的时候会把所有界面日志清除
7.	新增功能：程序启动时自动最小化窗口
8.	新增功能：打开日志
9.	新增功能：程序托盘的右键菜单增加单独同步某个配对
10.	优化配对列表绑定的逻辑，减少对系统的压力
11.	分析配对时如果对象的绝对路径超过系统限制（260个字符），现在会抛出一个日志记录后跳过

版本：2.0.1.1
日期：2023-2-15
改动：
1.	程序正式进入2.0版本！这个版本开始数据库增加支持SQLITE！原本的ACCESS数据库可以通过在全局设置中打开调试模式之后切换，也可以反过来从SQLITE转成ACCESS
ACCESS和SQLITE数据库对比：
	ACCESS：使用方便，有OFFICE365套件就能随时打开，背后是巨人撑腰，但是缺点是数据库文件庞大，同样数据量下的数据库文件是SQLITE的10倍，而且并发性能差，如果配对目录下有大量子目录和文件，会有可能导致数据库卡死的
	SQLITE：第三方的轻量化数据库，文件较小，并发性能也高，应付十万八万条数据不是问题，只是数据的查看需要第三方应用例如SQLiteStudio
2.	初次使用需要创建数据库现在是优先创建SQLITE数据库
3.	全局设置界面调整
4.	全局设置新增数据库备份功能，需要打开调试模式
5.	数据库备份文件现在会以备份时间的时间戳作为结尾，以防止因为同名文件而备份失败
6.	修复了一些BUG

版本：1.2.2.2
日期：2023-2-10
改动：
1.	修复新功能“本地临时目录”的严重BUG，该BUG会导致文件同步变成单向移动非复制
2.	界面逻辑优化
3.	代码优化，现在同步效率会再提升一点点

版本：1.2.2.1
日期：2023-2-9
改动：
1.	新增本地临时目录功能，此功能打开后当配对的一方目录不是本地磁盘的时候，同步过程中发现的新文件会先复制到临时目录，再计算MD5，后面的同步也会使用这个临时目录里的临时文件，这样能够有效提高同步速度，针对网络驱动器上的大文件同步尤其有效，在全局设置中设置
2.	代码优化和BUG修复

版本：1.2.1.4
日期：2023-2-3
改动：
1.	现在同步删除并移到“_FSBackup”文件夹下面的对象会多一层目录，目录名为当次的同步时间
2.	分析配对功能下降为调试模式下的功能，现在非调试模式该按钮会被隐藏
3.	修复分析配对的时候底部信息栏把当前文件显示为目录的错误
4.	界面UI的交互优化

版本：1.2.1.3
日期：2022-12-21
改动：
1.	代码优化，修复了部分崩溃BUG

版本：1.2.1.2
日期：2022-10-3
改动：
1.	主界面调整，增加一个配对总览列表，可以通过点击列表中的配对行与下面的日志项目联动
2.	日志消息栏的自动清空长度调整为150000
3.	修复了一个目录或文件路径存在单引号的时候该项目会无法同步的BUG
4.	修复开机启动程序无法找到数据库的BUG
5.	一些代码优化

版本：1.2.1.1
日期：2022-9-28
改动：
1.	从这个版本开始，版本号将会改成“主要.次要.内部.修订“的形式，日期将不再出现
2.	主界面调整，现在所有配对的信息（同步时间、分析/同步进度、正在进行的操作）、日志消息、日志文件都会分开记录和展示
3.	日志消息的调整和细化
4.	配对管理中现在可以从浏览对话框中选择两个目录的路径
5.	配对管理中现在可以独立查看配对日志文件大小并且清除
6.	修复了一处错误，该错误会导致关闭配对管理窗口之后重复添加配对页面的问题
7.	日志消息框现在显示的字符数超过60000个的时候会自动清除
8.	代码优化</value>
  </data>
</root>